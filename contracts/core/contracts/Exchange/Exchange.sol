// SPDX-License-Identifier: UNLICENSED

// Author: TrejGun
// Email: trejgun@gemunion.io
// Website: https://gemunion.io/

pragma solidity ^0.8.13;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/finance/PaymentSplitter.sol";

import "@gemunion/contracts-mocks/contracts/Wallet.sol";

import "./ExchangeCore.sol";
import "./ExchangeCraft.sol";
import "./ExchangeGrade.sol";
import "./ExchangeBreed.sol";
import "./ExchangeMystery.sol";
import "./ExchangeClaim.sol";
import "./ExchangeRentable.sol";
import "./ExchangeLottery.sol";
import "./ExchangeRaffle.sol";
import "./referral/LinearReferral.sol";
import "./interfaces/IAsset.sol";
import "../utils/TopUp.sol";

/**
 * @dev This contract serves as the core Exchange contract in our ecosystem
 *      It is designed to manage various types of token exchanges with different mechanics,
 *      enabling the transfer of multiple tokens in a single transaction and facilitating payment with multiple tokens.
 *      The contract allows to withdraw profit generated by the system and to share it among multiple parties.
 */
contract Exchange is
  ExchangeCore,
  ExchangeCraft,
  ExchangeGrade,
  ExchangeBreed,
  ExchangeMystery,
  ExchangeClaim,
  ExchangeRentable,
  ExchangeLottery,
  ExchangeRaffle,
  PaymentSplitter,
  LinearReferral,
  Wallet,
  TopUp
{
  constructor(
    string memory name,
    address[] memory payees,
    uint256[] memory shares
  ) SignatureValidator(name) PaymentSplitter(payees, shares) {
    _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());
    _grantRole(MINTER_ROLE, _msgSender());
    _grantRole(PAUSER_ROLE, _msgSender());
    _grantRole(METADATA_ROLE, _msgSender());
  }

  /**
   * @dev Pauses the contract.
   */
  function pause() public onlyRole(PAUSER_ROLE) {
    _pause();
  }

  /**
   * @dev Unpauses the contract.
   */
  function unpause() public onlyRole(PAUSER_ROLE) {
    _unpause();
  }

  function supportsInterface(
    bytes4 interfaceId
  ) public view virtual override(AccessControl, Wallet, TopUp) returns (bool) {
    return super.supportsInterface(interfaceId);
  }

  /**
   * @dev Rejects any incoming ETH transfers to this contract address
   */
  receive() external payable override(PaymentSplitter, Wallet, TopUp) {
    revert();
  }

  function _afterPurchase(
    address referrer,
    Asset[] memory price
  ) internal override(ExchangeCore, ExchangeMystery, ExchangeLottery, ExchangeRaffle, LinearReferral) {
    return super._afterPurchase(referrer, price);
  }
}
