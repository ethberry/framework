name: Test & Deploy master
on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  ci-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        # Docker Hub image
        image: postgres:alpine
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: framework-test
          POSTGRES_PORT: 5432
        ports: [ "5432:5432" ]
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Authenticate Registry & Configure Git User
        run: |
          echo "@gemunion:registry=https://npm.pkg.github.com/" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=$GITHUBTOKEN" >> .npmrc
          git update-index --assume-unchanged .npmrc
          npx npm-cli-login -u $GITHUBUSER -p $GITHUBTOKEN -e $GITHUBEMAIL -r https://npm.pkg.github.com -s @gemunion --config-path="./"
          git config --global user.name '@gemunion'
          git config --global user.email $GITHUBEMAIL
        env:
          GITHUBTOKEN: ${{ secrets.GITHUBTOKEN }}
          GITHUBUSER: ${{ secrets.GITHUBUSER }}
          GITHUBEMAIL: ${{ secrets.GITHUBEMAIL }}


      - name: Authenticate check via npm
        run: npm whoami --registry=https://npm.pkg.github.com/

      - name: Install Packages
        run: npm i

      - name: Npm run test
        run: npm run test
        env:
          NODE_ENV: test
          POSTGRES_URL: 'postgres://postgres:postgres@0.0.0.0:5432/framework-test'
          CHAIN_ID: 13378
          GEMUNION_API_KEY: ${{ secrets.GEMUNION_API_KEY }}
          GITHUBTOKEN: ${{ secrets.GITHUBTOKEN }}

  cloudbuild-deploy:
    needs: ci-test
    runs-on: ubuntu-latest
    steps:
      - name: Send webhook cloud-build deploy
        run: |
          curl --request POST --url $CLOUDBUILD_WEBHOOK_URL --header "content-type: application/json"
        env:
          CLOUDBUILD_WEBHOOK_URL: ${{ secrets.CLOUDBUILD_WEBHOOK_URL }}

#  telegram-notify-start:
#    needs: cloudbuild-deploy
#    runs-on: ubuntu-latest
#    steps:
#      - name: Send message to Telegram
#        uses: appleboy/telegram-action@master
#        with:
#          to: ${{ secrets.TELEGRAM_CHAT }}
#          token: ${{ secrets.TELEGRAM_TOKEN }}
#          format: html
#          message: |
#            The manual dispatch event triggered Cloud-build Deploy action.
#
